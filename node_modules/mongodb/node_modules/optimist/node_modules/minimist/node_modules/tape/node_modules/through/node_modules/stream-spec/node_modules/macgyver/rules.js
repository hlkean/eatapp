var assert = require("assert")

function ifNull(n) {
  return n == null ? -1 : n
}
function p(s) {
  return '('+s+')'
}
function bt(s) {
  return '`' + s + '`'
}

function abbrev (contract) {

  var func = contract.function.toString()
  var name = contract.name

  return [
    (name ? bt(name) : ''),
    p( func.length < 80
      ? func : func.substring(0, 100) + '...')
  ].join(': ')
}

function between (called, min, max) {
  if(max != null && called > max) return false
  if(min != null && called < min) return false
  return true
}

function plural (n) {
  return n > 1 || n === 0 ? ' times' : ' time'
}

function rangeDesc(min, max) {
  min = min == null ? null : min
  max = max == null ? null : max

  var s = ({
    '1:1'   : '*must* be called exactly once',
    '0:0'   : '*must* not be called',
    'null:1': '*may* be called',
    '1:null': '*must* eventually be called'
  })[min+':'+max]

  if (s) return s

  var a = (
      min == null ? '' :
      'at least ' + min + plural(min)
    )
  var b = (
       max == null ? '' :
      'at most ' + max + plural(max)
    )
  s = '*must* be called ' + (a && b ? a + ', and ' + b : a || b)

    return s
}

exports.isCalled = function (min, max) {
    if(min != null && max != null)
      if (min > max) throw new Error('min must be smaller than max')
   var err = new Error()
   function error (con) {
      err.message = (
        'broke contract: '
        + abbrev(con)
        + ' '
        + rangeDesc(min, max)
        + ', but was '
        + ( con.called === 0
      