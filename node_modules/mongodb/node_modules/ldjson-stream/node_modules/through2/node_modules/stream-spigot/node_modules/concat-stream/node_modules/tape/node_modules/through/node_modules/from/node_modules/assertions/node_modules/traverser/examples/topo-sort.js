//topographical sort

var traverse = require('traverser')

exports = module.exports = sort

  function sort(depends) {
    var levels = []
      , requires = {}
      
    if(Object.keys(depends).length == 0)
      return []
    
    traverse(depends,{branch: roots})

    sorted = levels.reduce(function (x,y){
      return x.concat(y)
    })
      
    return sorted.map(deps)
    
    function roots(p){
      var level = p.max() + 0
      if(p.parent){
        levels[level] = levels[level] || []
        if(-1 == levels[level].indexOf(p.key))
          levels[level].push(p.key)
        requires[p.key] = Object.keys(p.value)
      }
      return level + 1
    }
    function deps(x){
      return [x,requires[x]]
    }
  }
  
exports.flat = flat
    function flat(depends) {
    var levels = []
      , requires = {}
      
    if(Object.keys(depends).length == 0)
      return []
    
    traverse(depends,{branch: roots})

    sorted = levels.reduce(function (x,y){
      return x.concat(y)
    })
      
    return sorted
    
    function roots(p){
      var level = p.max() + 0
      if(p.parent){
        levels[level] = levels[level] || []
        if(-1 == levels[level].indexOf(p.key))
          levels[level].push(p.key)
        requires[p.key] = Object.keys(p.value)
      }
      return level + 1
    }
  }
  
  var simple = 
      { x: 
        { y: 
          { z: {}
          , a: {}}}}

  console.log(flat(simple))
  console.log(sort(simple))

//a much more complex example, tree is acutal dependencies, generated by remap (> npm install remap)
        
 var var0,var1,var2,var3,var4,var5,var6,var7,var8,var9,var10
   ,var11,var12,var13,var14,var15,var16,var17,var18,var19,var20
   ,var21,var22,var23,var24

var complex = 
{
 'meta-test/asynct_adapter': {
   'async_testing/lib/testing': {
     assert: var1={}
    , path: var2={}
    , fs: var0={}
    , child_process: var3={}
    , 'async_testing/lib/messages': {}
    , inspect: var6={
       'inspect/inspect': {}
       }
     }
  , 'meta-test/test_reports': {
     easyf