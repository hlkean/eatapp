#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var utils = require('../utils');

var projectRoot = utils.findProjectRoot();

installHook();
configJshint();

function installHook() {
    utils.findGitRoot(function (err, root) {
        var sourcePath, destPath;

        if (err) {
            console.error('This project doesn\'t appear to be a git repository. JSHint configuration will be created anyway. To enable the pre-commit hook, run `git init` followed by `npm run precommit-hook install`.');
        } else {
            sourcePath = path.join(__dirname, 'pre-commit');
            destPath = path.join(root, '.git', 'hooks', 'pre-commit');

            fs.writeFileSync(destPath, fs.readFileSync(sourcePath, 'utf8').replace('{{projectRoot}}', projectRoot.replace(/\\/g, '\\\\')));
            fs.chmodSync(destPath, '755');
        }
    });
}

function configJshint() {
    var ignoreSource = path.resolve(__dirname, '..', 'files', 'jshintignore');
    var ignoreDest = path.join(projectRoot, '.jshintignore');
    var configSource = path.resolve(__dirname, '..', 'files', 'jshintrc');
    var configDest = path.join(projectRoot, '.jshintrc');

    if (!fs.existsSync(ignoreDest)) {
        fs.writeFileSync(ignoreDest, fs.readFileSync(ignoreSource));
    }

    if (!fs.existsSync(configDest)) {
        fs.writeFileSync(configDest, fs.readFileSync(configSource));
    }
}
