{
  "strings.js": {
    "name": "strings",
    "path": "../fixtures/strings.js",
    "comments": [
      [
        {
          "description": "## new Strings()\n\n> Strings constructor method\n\nInstantiate a new instance of Strings, optionally passing a default context to use.",
          "return": "{Object} Instance of a Strings object",
          "line": 17
        },
        {
          "description": "## .propstring (name, propstring)\n\nGet or set a propstring.\n\n**Example**\n\n```js\nstrings.propstring('permalinks', ':destBase/:dirname/:basename/index.:ext');\n```",
          "param": [
            "{String} `name`",
            "{String} `propstring`"
          ],
          "return": "{Object} Instance of the current Strings object",
          "api": "public",
          "params": [
            {
              "type": "String",
              "name": "`name`",
              "description": ""
            },
            {
              "type": "String",
              "name": "`propstring`",
              "description": ""
            }
          ],
          "line": 42
        },
        {
          "description": "## .pattern (name, pattern)\n\nGet or set regular expression or string.\n\n**Example**\n\n```js\nstrings.pattern('prop', ':([\\\\w]+)');\n```",
          "param": [
            "{String} `name`",
            "{String} `pattern`"
          ],
          "return": "{Object} Instance of the current Strings object",
          "api": "public",
          "params": [
            {
              "type": "String",
              "name": "`name`",
              "description": ""
            },
            {
              "type": "String",
              "name": "`pattern`",
              "description": ""
            }
          ],
          "line": 68
        },
        {
          "description": "## .replacement (name, replacement)\n\nGet or set a replacement string or function.\n\n**Example**\n\n```js\nstrings.replacement('prop', function(match) {\n  return match.toUpperCase();\n});\n```",
          "param": [
            "{String} `name`",
            "{String} `replacement`"
          ],
          "return": "{Object} Instance of the current Strings object",
          "api": "public",
          "params": [
            {
              "type": "String",
              "name": "`name`",
              "description": ""
            },
            {
              "type": "String",
              "name": "`replacement`",
              "description": ""
            }
          ],
          "line": 97
        },
        {
          "description": "## .parser ( name, replacement-patterns )\n\nDefine a named parser to be used against any given string.\n\n**Example**\n\nPass an object:\n\n```js\nstrings.parser('prop', {\n  pattern: /:([\\\\w]+)/,\n  replacement: function(match) {\n    return match.toUpperCase();\n  }\n);\n```\n\nOr an array\n\n```js\nstrings.parser('prop', [\n  {\n    pattern: 'a',\n    replacement: 'b'\n  },\n  {\n    pattern: 'c',\n    replacement: 'd'\n  }\n]);\n```",
          "param": [
            "{S